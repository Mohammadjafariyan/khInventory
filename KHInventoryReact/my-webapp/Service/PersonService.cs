using System;
using System.Linq;
using my_webapp.Model;
using SignalRMVCChat.Models.autoGeneratedContext;
using SignalRMVCChat.Service;
using TelegramBotsWebApplication.Areas.Admin.Models;
using TelegramBotsWebApplication.Areas.Admin.Service;

namespace my_webapp.Service
{
    public class PersonService : GenericServiceSafeDelete<Distribution>
    {
        private readonly DistributionService _distributionService;

        public PersonService(GenericSafeDeleteImp<Distribution> Impl,
            DistributionService distributionService) : base(Impl)
        {
            _distributionService = distributionService;
        }


        public new MyDataTableResponse<Person> GetAll()
        {
            return new MyDataTableResponse<Person>
            {
                EntityList = GetQuery().OrderByDescending(o => o.Id)
                    .ToList()
                    .Select(o => new Person
                    {
                        Id = o.Id,
                        Mobile = o.Telephone?.ToString(),
                        MilliCode = o.CodeMelli?.ToString(),
                        Name = o.NamVaNameKhanevadegi
                    }).ToList(),
                Status = MyResponseStatus.Success
            };
        }


        public MyEntityResponse<int> Save(Person model)
        {
            bool exist = this.GetQuery().ToList().Any(q => q.NamVaNameKhanevadegi == model.Name ||
                                                           q.CodeMelli?.ToString() == model.MilliCode ||
                                                           q.Telephone?.ToString() == model.Mobile);
            if (exist)
                throw new System.Exception("شخصی با این مشخصات قبلا ثبت شده است");

            /*double milicode = 0;
            var milicodeParsed = double.TryParse(model.MilliCode, out milicode);

            double Mobile = 0;
            var mobileParsed = double.TryParse(model.Mobile, out Mobile);

            if (milicodeParsed == false)
            {
                throw new Exception("کد ملی صحیح نیست");
            }

            if (mobileParsed == false)
            {
                throw new Exception("شماره موبایل صحیح نیست");
            }
            */

            return base.Save(new Distribution
            {
                NamVaNameKhanevadegi = model.Name,
                CodeMelli = model.MilliCode,
                Telephone = model.Mobile,
            });
        }

        public MyDataTableResponse<Person> Search(string searchTerm)
        {
            return new MyDataTableResponse<Person>
            {
                EntityList = this.GetQuery()
                    .OrderByDescending(o => o.Id).ToList().Where(q =>
                        q.CodeMelli?.ToString()?.Contains(searchTerm) == true
                        || q.NamVaNameKhanevadegi?.Contains(searchTerm) == true
                        || q.Telephone?.ToString()?.Contains(searchTerm) == true)
                    .ToList().Select(o =>
                        new Person
                        {
                            Id = o.Id,
                            Mobile = o.Telephone?.ToString(),
                            MilliCode = o.CodeMelli?.ToString(),
                            Name = o.NamVaNameKhanevadegi
                        }).ToList()
            };
        }
    }
}