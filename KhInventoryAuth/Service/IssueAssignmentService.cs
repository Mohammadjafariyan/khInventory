using System;
using System.Collections.Generic;
using System.Linq;
using KhInventoryAuth.sysAdmin.Service;
using Microsoft.EntityFrameworkCore;
using my_webapp.Model;
using SignalRMVCChat.Areas.sysAdmin.Service;
using SignalRMVCChat.Models.autoGeneratedContext;
using SignalRMVCChat.Service;
using TelegramBotsWebApplication;
using TelegramBotsWebApplication.Areas.Admin.Models;
using TelegramBotsWebApplication.Areas.Admin.Service;

namespace my_webapp.Service
{
    public class IssueAssignmentService : GenericServiceSafeDelete<IssueAssignment>
    {
        private readonly AnimalFoodService animalFoodService;
        private readonly PersonService personService;
        private readonly MalinfoService _malinfoService;

        public IssueAssignmentService(GenericSafeDeleteImp<IssueAssignment> Impl,
            AnimalFoodService animalFoodService,
            PersonService personService, MalinfoService malinfoService) : base(Impl)
        {
            this.animalFoodService = animalFoodService;
            this.personService = personService;
            _malinfoService = malinfoService;
        }

        public override MyEntityResponse<bool> DeleteById(int id)
        {
            return base.DeleteById(id);
        }

        public override bool Equals(object obj)
        {
            return base.Equals(obj);
        }

        public override MyDataTableResponse<IssueAssignment> GetAll()
        {
            return base.GetAll();
        }

        public MyDataTableResponse<IssueAssignment> GetAllByAnimalFoodId(int animalFoodId, int? take, int? skip)
        {
            var query = GetQuery().Where(q => q.AnimalFoodId == animalFoodId);


            int total = query.Count();
            query = MyUtility.AsPaging(query, take, skip);

            return new MyDataTableResponse<IssueAssignment>
            {
                Total = total, LastSkip = skip,

                LastTake = take > 0 ? take.Value : MyGlobal.PagingCount,
                EntityList = query.ToList(),
            };
        }

        public override MyDataTableResponse<IssueAssignment> GetAsPaging(int take, int? skip, int? dependId)
        {
            return base.GetAsPaging(take, skip, dependId);
        }

        public override MyEntityResponse<IssueAssignment> GetById(int id, string notFoundMsg = null)
        {
            return base.GetById(id, notFoundMsg);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override List<IssueAssignment> GetMocklist()
        {
            return base.GetMocklist();
        }

        public override IQueryable<IssueAssignment> GetQuery()
        {
            return base.GetQuery().Include(q => q.AnimalFood).Include(q => q.Person);
        }

        /// <summary>
        /// صدور حواله
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public override MyEntityResponse<int> Save(IssueAssignment model)
        {
            var animalFood = animalFoodService.GetById(model.AnimalFoodId).Single;

            if (model.Quan <= 0)
            {
                throw new System.Exception("مقدار صحیح نیست");
            }

            if (model.Quan > animalFood.Remain)
            {
                throw new System.Exception("مقدار درخواستی برای حواله بیشتر از موجودی انبار است"
                                           + "\n" +
                                           "موجودی انبار : "
                                           + "\n" +
                                           animalFood.Remain
                );
            }

            //vl
            personService.GetById(model.PersonId);

            //bs:از مقدار موجودی در انبار کسر می شود
            animalFood.Remain -= model.Quan;

            animalFoodService.Save(animalFood);

            return base.Save(model);
        }

        public override string ToString()
        {
            return base.ToString();
        }

        protected override IQueryable<IssueAssignment> FilterDependIdForPagingHelper(
            IQueryable<IssueAssignment> entities, int value, out dynamic dependEntity)
        {
            return base.FilterDependIdForPagingHelper(entities, value, out dependEntity);
        }

        protected override IQueryable<IssueAssignment> IncludeForGetAsPagingHelper(IQueryable<IssueAssignment> entities)
        {
            return base.IncludeForGetAsPagingHelper(entities);
        }

        public IssueAssignment GetForPrintById(int id)
        {
            var issueAssignment = GetQuery().Include(q => q.Person).FirstOrDefault(o => o.Id == id);

            if (issueAssignment == null)
            {
                throw new Exception("حواله یافت نشد");
            }

            return issueAssignment;
        }

        public IssueAssignment GetWithPerson(int modelId)
        {
            var single = GetQuery().SingleOrDefault(s => s.Id == modelId);
            if (single == null)
            {
                throw new Exception("حواله یافت نشد");
            }

            return single;
        }

        public IssueAssignmentCalculationViewModel GetAnimalFoodAndPersonQuota(int foodId, int personId)
        {
            var animalFood = animalFoodService.GetById(foodId, "نهاده یافت نشد");
            var person = personService.GetById(personId, "مشتری یافت نشد");


           /*  var malinfo= _malinfoService.GetQuery()
                .FirstOrDefault(m => m.DistributionId == person.Single.Id); */



            double kg= animalFood.Single.PerCustomerTotalMalQouta * (person?.Single.MalCount ?? 0);


            return new IssueAssignmentCalculationViewModel
            {
                Kg = kg,

            };

            /*var malinfo = _malinfoService.GetQuery()
                .Where(m => m.NameDamdar.Trim().Contains(person.Single.NamVaNameKhanevadegi.Trim()))
                .FirstOrDefault();*/



        }
    }

    public class IssueAssignmentCalculationViewModel
    {
        public double Kg { get; set; }
    }
}