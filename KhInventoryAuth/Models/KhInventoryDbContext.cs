
using Microsoft.AspNetCore.Builder;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.Extensions.DependencyInjection;
using SignalRMVCChat.Models.autoGeneratedContext;

namespace my_webapp.Model
{
    public class KhInventoryDbContext:DbContext
    {


 protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        base.OnConfiguring(optionsBuilder);
        optionsBuilder.ReplaceService<IRelationalTypeMappingSource, SqlServerTypeMappingSource>();
     
        
   //  optionsBuilder.UseInMemoryDatabase("KhInventoryContext");
     //   optionsBuilder.UseSqlServer("User ID=mahdijafariyan_SQLLogin_1;Password=gf848w8b2b;Server=khosrowshah.mssql.somee.com;Trusted_Connection=False;Database=khosrowshah");
    }

 public KhInventoryDbContext(DbContextOptions options) : base(options)
 {
     this.Database.EnsureCreated();

 }

     

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<IssueAssignment>()
                .HasOne(f => f.AnimalFood)
                .WithMany(f => f.IssueAssignments)
                .HasForeignKey(f => f.AnimalFoodId);

            modelBuilder.Entity<IssueAssignment>()
                .HasOne(f => f.Person)
                .WithMany(f => f.IssueAssignments)
                .HasForeignKey(f => f.PersonId);

                #region BuyAnimalFood

            modelBuilder.Entity<AnimalFood>()
                .HasMany(f => f.AnimalFoodBuys)
                .WithOne(f => f.AnimalFood)
                .HasForeignKey(f => f.AnimalFoodId);



                #endregion

            
            base.OnModelCreating(modelBuilder);
        }


        public DbSet<AnimalFood> AnimalFoods { get; set; }
        public DbSet<IssueAssignment> IssueAssignments { get; set; }
        /*public DbSet<Person> Persons { get; set; }*/
        public virtual DbSet<Distribution> Distributions { get; set; }
        public virtual DbSet<MalInfos> MalInfos { get; set; }

        
        public static void UpdateDatabase(IApplicationBuilder app)
        {
            using (var serviceScope = app.ApplicationServices
                .GetRequiredService<IServiceScopeFactory>()
                .CreateScope())
            {
                using (var context = serviceScope.ServiceProvider.GetService<KhInventoryDbContext>())
                {
                    context.Database.Migrate();
                }
            }
        }
    }
    
    
}